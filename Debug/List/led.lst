###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       30/Nov/2021  19:36:22
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Users\pnu5\Downloads\project_test\Libraries\Term\led.c
#    Command line =  
#        -f C:\Users\pnu5\AppData\Local\Temp\EW5DD8.tmp
#        (C:\Users\pnu5\Downloads\project_test\Libraries\Term\led.c -D
#        USE_STDPERIPH_DRIVER -D STM32F10X_CL -lC
#        C:\Users\pnu5\Downloads\project_test\Debug\List -o
#        C:\Users\pnu5\Downloads\project_test\Debug\Obj --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\pnu5\Downloads\project_test\libraries\CMSIS\DeviceSupport\ -I
#        C:\Users\pnu5\Downloads\project_test\libraries\CMSIS\DeviceSupport\Startup\
#        -I
#        C:\Users\pnu5\Downloads\project_test\libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\
#        -I
#        C:\Users\pnu5\Downloads\project_test\libraries\STM32F10x_StdPeriph_Driver_v3.5\src\
#        -I C:\Users\pnu5\Downloads\project_test\user\ -I
#        C:\Users\pnu5\Downloads\project_test\libraries\LCD\ -I
#        C:\Users\pnu5\Downloads\project_test\libraries\Term\ -I
#        C:\Users\pnu5\Downloads\project_test\user\inc\ -Ol -I "C:\Program
#        Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  C:\Users\pnu5\Downloads\project_test\Debug\List\led.lst
#    Object file  =  C:\Users\pnu5\Downloads\project_test\Debug\Obj\led.o
#
###############################################################################

C:\Users\pnu5\Downloads\project_test\Libraries\Term\led.c
      1          #include "stm32f10x.h"
      2          

   \                                 In section .text, align 2, keep-with-next
      3          void led_init() {
   \                     led_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
      4            GPIO_InitTypeDef GPIO_InitStructure;
      5            RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOE, ENABLE); 
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x2040             MOVS     R0,#+64
   \   00000006   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
      6            
      7            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4;
   \   0000000A   0x201C             MOVS     R0,#+28
   \   0000000C   0xF8AD 0x0000      STRH     R0,[SP, #+0]
      8            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000010   0x2003             MOVS     R0,#+3
   \   00000012   0xF88D 0x0002      STRB     R0,[SP, #+2]
      9            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   \   00000016   0x2010             MOVS     R0,#+16
   \   00000018   0xF88D 0x0003      STRB     R0,[SP, #+3]
     10            GPIO_Init(GPIOE, &GPIO_InitStructure);  
   \   0000001C   0x4669             MOV      R1,SP
   \   0000001E   0x....             LDR.N    R0,??DataTable1  ;; 0x40011800
   \   00000020   0x.... 0x....      BL       GPIO_Init
     11          }
   \   00000024   0xBD01             POP      {R0,PC}          ;; return
     12          

   \                                 In section .text, align 2, keep-with-next
     13          void led_control(int control_value, int light) {      
   \                     led_control: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     14            if (control_value == 1) { // ON
   \   00000002   0x2801             CMP      R0,#+1
   \   00000004   0xD10C             BNE.N    ??led_control_0
     15              GPIO_ResetBits(GPIOE, GPIO_Pin_2);
   \   00000006   0x2104             MOVS     R1,#+4
   \   00000008   0x....             LDR.N    R0,??DataTable1  ;; 0x40011800
   \   0000000A   0x.... 0x....      BL       GPIO_ResetBits
     16              GPIO_ResetBits(GPIOE, GPIO_Pin_3);
   \   0000000E   0x2108             MOVS     R1,#+8
   \   00000010   0x....             LDR.N    R0,??DataTable1  ;; 0x40011800
   \   00000012   0x.... 0x....      BL       GPIO_ResetBits
     17              GPIO_ResetBits(GPIOE, GPIO_Pin_4);
   \   00000016   0x2110             MOVS     R1,#+16
   \   00000018   0x....             LDR.N    R0,??DataTable1  ;; 0x40011800
   \   0000001A   0x.... 0x....      BL       GPIO_ResetBits
   \   0000001E   0xE04A             B.N      ??led_control_1
     18            }
     19            else if (control_value == 2) { // OFF
   \                     ??led_control_0: (+1)
   \   00000020   0x2802             CMP      R0,#+2
   \   00000022   0xD10C             BNE.N    ??led_control_2
     20              GPIO_SetBits(GPIOE, GPIO_Pin_2);
   \   00000024   0x2104             MOVS     R1,#+4
   \   00000026   0x....             LDR.N    R0,??DataTable1  ;; 0x40011800
   \   00000028   0x.... 0x....      BL       GPIO_SetBits
     21              GPIO_SetBits(GPIOE, GPIO_Pin_3);
   \   0000002C   0x2108             MOVS     R1,#+8
   \   0000002E   0x....             LDR.N    R0,??DataTable1  ;; 0x40011800
   \   00000030   0x.... 0x....      BL       GPIO_SetBits
     22              GPIO_SetBits(GPIOE, GPIO_Pin_4);
   \   00000034   0x2110             MOVS     R1,#+16
   \   00000036   0x....             LDR.N    R0,??DataTable1  ;; 0x40011800
   \   00000038   0x.... 0x....      BL       GPIO_SetBits
   \   0000003C   0xE03B             B.N      ??led_control_1
     23            }
     24            else { //AUTO
     25              if (light >= 80) { 
   \                     ??led_control_2: (+1)
   \   0000003E   0x2950             CMP      R1,#+80
   \   00000040   0xDB0C             BLT.N    ??led_control_3
     26                GPIO_ResetBits(GPIOE, GPIO_Pin_2);
   \   00000042   0x2104             MOVS     R1,#+4
   \   00000044   0x....             LDR.N    R0,??DataTable1  ;; 0x40011800
   \   00000046   0x.... 0x....      BL       GPIO_ResetBits
     27                GPIO_ResetBits(GPIOE, GPIO_Pin_3);
   \   0000004A   0x2108             MOVS     R1,#+8
   \   0000004C   0x....             LDR.N    R0,??DataTable1  ;; 0x40011800
   \   0000004E   0x.... 0x....      BL       GPIO_ResetBits
     28                GPIO_ResetBits(GPIOE, GPIO_Pin_4);
   \   00000052   0x2110             MOVS     R1,#+16
   \   00000054   0x....             LDR.N    R0,??DataTable1  ;; 0x40011800
   \   00000056   0x.... 0x....      BL       GPIO_ResetBits
   \   0000005A   0xE02C             B.N      ??led_control_1
     29              }    
     30              else if (50 <= light && light < 75) {
   \                     ??led_control_3: (+1)
   \   0000005C   0xF1B1 0x0032      SUBS     R0,R1,#+50
   \   00000060   0x2819             CMP      R0,#+25
   \   00000062   0xD20C             BCS.N    ??led_control_4
     31                GPIO_SetBits(GPIOE, GPIO_Pin_2);
   \   00000064   0x2104             MOVS     R1,#+4
   \   00000066   0x....             LDR.N    R0,??DataTable1  ;; 0x40011800
   \   00000068   0x.... 0x....      BL       GPIO_SetBits
     32                GPIO_ResetBits(GPIOE, GPIO_Pin_3);
   \   0000006C   0x2108             MOVS     R1,#+8
   \   0000006E   0x....             LDR.N    R0,??DataTable1  ;; 0x40011800
   \   00000070   0x.... 0x....      BL       GPIO_ResetBits
     33                GPIO_ResetBits(GPIOE, GPIO_Pin_4);
   \   00000074   0x2110             MOVS     R1,#+16
   \   00000076   0x....             LDR.N    R0,??DataTable1  ;; 0x40011800
   \   00000078   0x.... 0x....      BL       GPIO_ResetBits
   \   0000007C   0xE01B             B.N      ??led_control_1
     34              }
     35              else if (25 <= light && light < 50) {
   \                     ??led_control_4: (+1)
   \   0000007E   0x3919             SUBS     R1,R1,#+25
   \   00000080   0x2919             CMP      R1,#+25
   \   00000082   0xD20C             BCS.N    ??led_control_5
     36                GPIO_SetBits(GPIOE, GPIO_Pin_2);
   \   00000084   0x2104             MOVS     R1,#+4
   \   00000086   0x....             LDR.N    R0,??DataTable1  ;; 0x40011800
   \   00000088   0x.... 0x....      BL       GPIO_SetBits
     37                GPIO_SetBits(GPIOE, GPIO_Pin_3);
   \   0000008C   0x2108             MOVS     R1,#+8
   \   0000008E   0x....             LDR.N    R0,??DataTable1  ;; 0x40011800
   \   00000090   0x.... 0x....      BL       GPIO_SetBits
     38                GPIO_ResetBits(GPIOE, GPIO_Pin_4);
   \   00000094   0x2110             MOVS     R1,#+16
   \   00000096   0x....             LDR.N    R0,??DataTable1  ;; 0x40011800
   \   00000098   0x.... 0x....      BL       GPIO_ResetBits
   \   0000009C   0xE00B             B.N      ??led_control_1
     39              }
     40              else {
     41                GPIO_SetBits(GPIOE, GPIO_Pin_2);
   \                     ??led_control_5: (+1)
   \   0000009E   0x2104             MOVS     R1,#+4
   \   000000A0   0x....             LDR.N    R0,??DataTable1  ;; 0x40011800
   \   000000A2   0x.... 0x....      BL       GPIO_SetBits
     42                GPIO_SetBits(GPIOE, GPIO_Pin_3);
   \   000000A6   0x2108             MOVS     R1,#+8
   \   000000A8   0x....             LDR.N    R0,??DataTable1  ;; 0x40011800
   \   000000AA   0x.... 0x....      BL       GPIO_SetBits
     43                GPIO_SetBits(GPIOE, GPIO_Pin_4);
   \   000000AE   0x2110             MOVS     R1,#+16
   \   000000B0   0x....             LDR.N    R0,??DataTable1  ;; 0x40011800
   \   000000B2   0x.... 0x....      BL       GPIO_SetBits
     44              }      
     45            }
     46          }
   \                     ??led_control_1: (+1)
   \   000000B6   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x40011800         DC32     0x40011800

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   led_control
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
       8   led_init
         8   -> GPIO_Init
         8   -> RCC_APB2PeriphClockCmd


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
     184  led_control
      38  led_init

 
 226 bytes in section .text
 
 226 bytes of CODE memory

Errors: none
Warnings: none
