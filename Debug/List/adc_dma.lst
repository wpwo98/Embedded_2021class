###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       30/Nov/2021  18:13:16
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\pnu5\Downloads\project_test\Libraries\Term\adc_dma.c
#    Command line =  
#        -f C:\Users\pnu5\AppData\Local\Temp\EW4885.tmp
#        (C:\Users\pnu5\Downloads\project_test\Libraries\Term\adc_dma.c -D
#        USE_STDPERIPH_DRIVER -D STM32F10X_CL -lC
#        C:\Users\pnu5\Downloads\project_test\Debug\List -o
#        C:\Users\pnu5\Downloads\project_test\Debug\Obj --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\pnu5\Downloads\project_test\libraries\CMSIS\DeviceSupport\ -I
#        C:\Users\pnu5\Downloads\project_test\libraries\CMSIS\DeviceSupport\Startup\
#        -I
#        C:\Users\pnu5\Downloads\project_test\libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\
#        -I
#        C:\Users\pnu5\Downloads\project_test\libraries\STM32F10x_StdPeriph_Driver_v3.5\src\
#        -I C:\Users\pnu5\Downloads\project_test\user\ -I
#        C:\Users\pnu5\Downloads\project_test\libraries\LCD\ -I
#        C:\Users\pnu5\Downloads\project_test\libraries\Term\ -I
#        C:\Users\pnu5\Downloads\project_test\user\inc\ -Ol -I "C:\Program
#        Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  
#        C:\Users\pnu5\Downloads\project_test\Debug\List\adc_dma.lst
#    Object file  =  C:\Users\pnu5\Downloads\project_test\Debug\Obj\adc_dma.o
#
###############################################################################

C:\Users\pnu5\Downloads\project_test\Libraries\Term\adc_dma.c
      1          #include "stm32f10x.h"
      2          
      3          
      4          #define ADC1_DR    ((uint32_t)0x4001244C)

   \                                 In section .bss, align 4
      5          volatile uint16_t ADC_values[8];
   \                     ADC_values:
   \   00000000                      DS8 16

   \                                 In section .bss, align 4
      6          static volatile uint32_t __status = 0;
   \                     __status:
   \   00000000                      DS8 4
      7           
      8          void ADCInit(void);
      9          void DMAInit(void);
     10           

   \                                 In section .text, align 2, keep-with-next
     11          void adc_dma_init() {
   \                     adc_dma_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     12              ADCInit();
   \   00000002   0x.... 0x....      BL       ADCInit
     13              DMAInit();
   \   00000006   0x.... 0x....      BL       DMAInit
     14           
     15              ADC_SoftwareStartConvCmd(ADC1, ENABLE);
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0x....             LDR.N    R0,??DataTable4  ;; 0x40012400
   \   0000000E   0x.... 0x....      BL       ADC_SoftwareStartConvCmd
     16          }
   \   00000012   0xBD01             POP      {R0,PC}          ;; return
     17           

   \                                 In section .data, align 4
     18          int adc_view_flag = 1;
   \                     adc_view_flag:
   \   00000000   0x00000001         DC32 1
     19           

   \                                 In section .text, align 2, keep-with-next
     20          void dma_test_adc8ch(void)
     21          {
   \                     dma_test_adc8ch: (+1)
   \   00000000   0xB57C             PUSH     {R2-R6,LR}
     22              if(!__status) return;
   \   00000002   0x....             LDR.N    R0,??DataTable4_1
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD048             BEQ.N    ??dma_test_adc8ch_0
     23              
     24              uint8_t index;
     25              ADC_SoftwareStartConvCmd(ADC1, DISABLE);
   \                     ??dma_test_adc8ch_1: (+1)
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x....             LDR.N    R0,??DataTable4  ;; 0x40012400
   \   0000000E   0x.... 0x....      BL       ADC_SoftwareStartConvCmd
     26              if(adc_view_flag) {
   \   00000012   0x....             LDR.N    R0,??DataTable4_2
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD039             BEQ.N    ??dma_test_adc8ch_2
     27                  for(index = 0; index<8; index++){
   \   0000001A   0x2400             MOVS     R4,#+0
   \   0000001C   0xE030             B.N      ??dma_test_adc8ch_3
     28                      printf("%d ADC value on ch%d = %d ,%d\r\n",
                             ^
Warning[Pe223]: function "printf" declared implicitly
     29                      __status,index, (uint16_t)((ADC_values[index]+ADC_values[index+8]+ADC_values[index+16]+ADC_values[index+24])/4),ADC_values[index]);
   \                     ??dma_test_adc8ch_4: (+1)
   \   0000001E   0x....             LDR.N    R0,??DataTable4_3
   \   00000020   0x0021             MOVS     R1,R4
   \   00000022   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000024   0xF830 0x0011      LDRH     R0,[R0, R1, LSL #+1]
   \   00000028   0x....             LDR.N    R1,??DataTable4_3
   \   0000002A   0x0022             MOVS     R2,R4
   \   0000002C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000002E   0xF831 0x1012      LDRH     R1,[R1, R2, LSL #+1]
   \   00000032   0x....             LDR.N    R2,??DataTable4_3
   \   00000034   0x0023             MOVS     R3,R4
   \   00000036   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000038   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   0000003C   0x8A12             LDRH     R2,[R2, #+16]
   \   0000003E   0x....             LDR.N    R3,??DataTable4_3
   \   00000040   0x0025             MOVS     R5,R4
   \   00000042   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000044   0xEB03 0x0345      ADD      R3,R3,R5, LSL #+1
   \   00000048   0x8C1B             LDRH     R3,[R3, #+32]
   \   0000004A   0x....             LDR.N    R5,??DataTable4_3
   \   0000004C   0x0026             MOVS     R6,R4
   \   0000004E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000050   0xEB05 0x0546      ADD      R5,R5,R6, LSL #+1
   \   00000054   0x8E2D             LDRH     R5,[R5, #+48]
   \   00000056   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000058   0x9000             STR      R0,[SP, #+0]
   \   0000005A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000005C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000005E   0x1851             ADDS     R1,R2,R1
   \   00000060   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000062   0x1859             ADDS     R1,R3,R1
   \   00000064   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000066   0x1869             ADDS     R1,R5,R1
   \   00000068   0x2004             MOVS     R0,#+4
   \   0000006A   0xFB91 0xF3F0      SDIV     R3,R1,R0
   \   0000006E   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000070   0x0022             MOVS     R2,R4
   \   00000072   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000074   0x....             LDR.N    R0,??DataTable4_1
   \   00000076   0x6801             LDR      R1,[R0, #+0]
   \   00000078   0x....             LDR.N    R0,??DataTable4_4
   \   0000007A   0x.... 0x....      BL       printf
     30                  }
   \   0000007E   0x1C64             ADDS     R4,R4,#+1
   \                     ??dma_test_adc8ch_3: (+1)
   \   00000080   0x0020             MOVS     R0,R4
   \   00000082   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000084   0x2808             CMP      R0,#+8
   \   00000086   0xDBCA             BLT.N    ??dma_test_adc8ch_4
     31                  printf("=========================\n\r");
                         ^
Warning[Pe223]: function "printf" declared implicitly

              printf("%d ADC value on ch%d = %d ,%d\r\n",
              ^
"C:\Users\pnu5\Downloads\project_test\Libraries\Term\adc_dma.c",28  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement
   \   00000088   0x....             LDR.N    R0,??DataTable4_5
   \   0000008A   0x.... 0x....      BL       printf
     32              }
     33              __status = 0;
   \                     ??dma_test_adc8ch_2: (+1)
   \   0000008E   0x2000             MOVS     R0,#+0
   \   00000090   0x....             LDR.N    R1,??DataTable4_1
   \   00000092   0x6008             STR      R0,[R1, #+0]
     34              ADC_SoftwareStartConvCmd(ADC1, ENABLE);
   \   00000094   0x2101             MOVS     R1,#+1
   \   00000096   0x....             LDR.N    R0,??DataTable4  ;; 0x40012400
   \   00000098   0x.... 0x....      BL       ADC_SoftwareStartConvCmd
     35          }
   \                     ??dma_test_adc8ch_0: (+1)
   \   0000009C   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
     36           
     37          #define Cycles ADC_SampleTime_239Cycles5
     38          //#define Cycles ADC_SampleTime_41Cycles5
     39           

   \                                 In section .text, align 2, keep-with-next
     40          void ADCInit(void){
   \                     ADCInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
     41           
     42            
     43              //--Enable ADC1 and GPIOA--
     44              RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_GPIOA, ENABLE);
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0xF44F 0x7001      MOV      R0,#+516
   \   0000000A   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     45              GPIO_InitTypeDef GPIO_InitStructure; //Variable used to setup the GPIO pins
     46              //==Configure ADC pins (PA0 -> Channel 0 to PA7 -> Channel 7) as analog inputs==
     47              GPIO_StructInit(&GPIO_InitStructure); // Reset init structure, if not it can cause issues...
   \   0000000E   0x4668             MOV      R0,SP
   \   00000010   0x.... 0x....      BL       GPIO_StructInit
     48              GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1| GPIO_Pin_2| GPIO_Pin_3| GPIO_Pin_4| GPIO_Pin_5| GPIO_Pin_6| GPIO_Pin_7;
   \   00000014   0x20FF             MOVS     R0,#+255
   \   00000016   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     49              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0xF88D 0x0003      STRB     R0,[SP, #+3]
     50              GPIO_Init(GPIOA, &GPIO_InitStructure);
   \   00000020   0x4669             MOV      R1,SP
   \   00000022   0x....             LDR.N    R0,??DataTable4_6  ;; 0x40010800
   \   00000024   0x.... 0x....      BL       GPIO_Init
     51           
     52              ADC_InitTypeDef ADC_InitStructure;
     53              //ADC1 configuration
     54           
     55              ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x9001             STR      R0,[SP, #+4]
     56              //We will convert multiple channels
     57              ADC_InitStructure.ADC_ScanConvMode = ENABLE;
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0xF88D 0x0008      STRB     R0,[SP, #+8]
     58              //select continuous conversion mode
     59              ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;//!
   \   00000032   0x2001             MOVS     R0,#+1
   \   00000034   0xF88D 0x0009      STRB     R0,[SP, #+9]
     60              //select no external triggering
     61              ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
   \   00000038   0xF45F 0x2060      MOVS     R0,#+917504
   \   0000003C   0x9003             STR      R0,[SP, #+12]
     62              //right 12-bit data alignment in ADC data register
     63              ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x9004             STR      R0,[SP, #+16]
     64              //8 channels conversion
     65              ADC_InitStructure.ADC_NbrOfChannel = 8;
   \   00000042   0x2008             MOVS     R0,#+8
   \   00000044   0xF88D 0x0014      STRB     R0,[SP, #+20]
     66              //load structure values to control and status registers
     67              ADC_Init(ADC1, &ADC_InitStructure);
   \   00000048   0xA901             ADD      R1,SP,#+4
   \   0000004A   0x....             LDR.N    R0,??DataTable4  ;; 0x40012400
   \   0000004C   0x.... 0x....      BL       ADC_Init
     68              //wake up temperature sensor
     69              //ADC_TempSensorVrefintCmd(ENABLE);
     70              //configure each channel
     71              ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, Cycles);
   \   00000050   0x2307             MOVS     R3,#+7
   \   00000052   0x2201             MOVS     R2,#+1
   \   00000054   0x2100             MOVS     R1,#+0
   \   00000056   0x....             LDR.N    R0,??DataTable4  ;; 0x40012400
   \   00000058   0x.... 0x....      BL       ADC_RegularChannelConfig
     72              ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 2, Cycles);
   \   0000005C   0x2307             MOVS     R3,#+7
   \   0000005E   0x2202             MOVS     R2,#+2
   \   00000060   0x2101             MOVS     R1,#+1
   \   00000062   0x....             LDR.N    R0,??DataTable4  ;; 0x40012400
   \   00000064   0x.... 0x....      BL       ADC_RegularChannelConfig
     73              ADC_RegularChannelConfig(ADC1, ADC_Channel_2, 3, Cycles);
   \   00000068   0x2307             MOVS     R3,#+7
   \   0000006A   0x2203             MOVS     R2,#+3
   \   0000006C   0x2102             MOVS     R1,#+2
   \   0000006E   0x....             LDR.N    R0,??DataTable4  ;; 0x40012400
   \   00000070   0x.... 0x....      BL       ADC_RegularChannelConfig
     74              ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 4, Cycles);
   \   00000074   0x2307             MOVS     R3,#+7
   \   00000076   0x2204             MOVS     R2,#+4
   \   00000078   0x2103             MOVS     R1,#+3
   \   0000007A   0x....             LDR.N    R0,??DataTable4  ;; 0x40012400
   \   0000007C   0x.... 0x....      BL       ADC_RegularChannelConfig
     75              ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 5, Cycles);
   \   00000080   0x2307             MOVS     R3,#+7
   \   00000082   0x2205             MOVS     R2,#+5
   \   00000084   0x2104             MOVS     R1,#+4
   \   00000086   0x....             LDR.N    R0,??DataTable4  ;; 0x40012400
   \   00000088   0x.... 0x....      BL       ADC_RegularChannelConfig
     76              ADC_RegularChannelConfig(ADC1, ADC_Channel_5, 6, Cycles);
   \   0000008C   0x2307             MOVS     R3,#+7
   \   0000008E   0x2206             MOVS     R2,#+6
   \   00000090   0x2105             MOVS     R1,#+5
   \   00000092   0x....             LDR.N    R0,??DataTable4  ;; 0x40012400
   \   00000094   0x.... 0x....      BL       ADC_RegularChannelConfig
     77              ADC_RegularChannelConfig(ADC1, ADC_Channel_5, 7, Cycles);
   \   00000098   0x2307             MOVS     R3,#+7
   \   0000009A   0x2207             MOVS     R2,#+7
   \   0000009C   0x2105             MOVS     R1,#+5
   \   0000009E   0x....             LDR.N    R0,??DataTable4  ;; 0x40012400
   \   000000A0   0x.... 0x....      BL       ADC_RegularChannelConfig
     78              ADC_RegularChannelConfig(ADC1, ADC_Channel_7, 8, Cycles);
   \   000000A4   0x2307             MOVS     R3,#+7
   \   000000A6   0x2208             MOVS     R2,#+8
   \   000000A8   0x2107             MOVS     R1,#+7
   \   000000AA   0x....             LDR.N    R0,??DataTable4  ;; 0x40012400
   \   000000AC   0x.... 0x....      BL       ADC_RegularChannelConfig
     79              //Enable ADC1
     80              ADC_Cmd(ADC1, ENABLE);
   \   000000B0   0x2101             MOVS     R1,#+1
   \   000000B2   0x....             LDR.N    R0,??DataTable4  ;; 0x40012400
   \   000000B4   0x.... 0x....      BL       ADC_Cmd
     81              //enable DMA for ADC
     82              ADC_DMACmd(ADC1, ENABLE);
   \   000000B8   0x2101             MOVS     R1,#+1
   \   000000BA   0x....             LDR.N    R0,??DataTable4  ;; 0x40012400
   \   000000BC   0x.... 0x....      BL       ADC_DMACmd
     83              //Enable ADC1 reset calibration register
     84              ADC_ResetCalibration(ADC1);
   \   000000C0   0x....             LDR.N    R0,??DataTable4  ;; 0x40012400
   \   000000C2   0x.... 0x....      BL       ADC_ResetCalibration
     85              //Check the end of ADC1 reset calibration register
     86              while(ADC_GetResetCalibrationStatus(ADC1));
   \                     ??ADCInit_0: (+1)
   \   000000C6   0x....             LDR.N    R0,??DataTable4  ;; 0x40012400
   \   000000C8   0x.... 0x....      BL       ADC_GetResetCalibrationStatus
   \   000000CC   0x2800             CMP      R0,#+0
   \   000000CE   0xD1FA             BNE.N    ??ADCInit_0
     87              //Start ADC1 calibration
     88              ADC_StartCalibration(ADC1);
   \   000000D0   0x....             LDR.N    R0,??DataTable4  ;; 0x40012400
   \   000000D2   0x.... 0x....      BL       ADC_StartCalibration
     89              //Check the end of ADC1 calibration
     90              while(ADC_GetCalibrationStatus(ADC1));
   \                     ??ADCInit_1: (+1)
   \   000000D6   0x....             LDR.N    R0,??DataTable4  ;; 0x40012400
   \   000000D8   0x.... 0x....      BL       ADC_GetCalibrationStatus
   \   000000DC   0x2800             CMP      R0,#+0
   \   000000DE   0xD1FA             BNE.N    ??ADCInit_1
     91          }
   \   000000E0   0xB007             ADD      SP,SP,#+28
   \   000000E2   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 2, keep-with-next
     92          void DMAInit(void){
   \                     DMAInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0xB08C             SUB      SP,SP,#+48
     93              DMA_InitTypeDef  DMA_InitStructure;
     94              NVIC_InitTypeDef NVIC_InitStructure;
     95              //enable DMA1 clock
     96              RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x.... 0x....      BL       RCC_AHBPeriphClockCmd
     97              //create DMA structure
     98              //reset DMA1 channe1 to default values;
     99              DMA_DeInit(DMA1_Channel1);
   \   0000000C   0x....             LDR.N    R0,??DataTable4_7  ;; 0x40020008
   \   0000000E   0x.... 0x....      BL       DMA_DeInit
    100              //channel will be used for memory to memory transfer
    101              DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x900B             STR      R0,[SP, #+44]
    102              //setting normal mode (non circular)
    103              DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;//DMA_Mode_Normal;
   \   00000016   0x2020             MOVS     R0,#+32
   \   00000018   0x9009             STR      R0,[SP, #+36]
    104              //medium priority
    105              DMA_InitStructure.DMA_Priority = DMA_Priority_High;
   \   0000001A   0xF44F 0x5000      MOV      R0,#+8192
   \   0000001E   0x900A             STR      R0,[SP, #+40]
    106              //source and destination data size word=32bit
    107              DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
   \   00000020   0xF44F 0x7080      MOV      R0,#+256
   \   00000024   0x9007             STR      R0,[SP, #+28]
    108              DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
   \   00000026   0xF44F 0x6080      MOV      R0,#+1024
   \   0000002A   0x9008             STR      R0,[SP, #+32]
    109              //automatic memory destination increment enable.
    110              DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
   \   0000002C   0x2080             MOVS     R0,#+128
   \   0000002E   0x9006             STR      R0,[SP, #+24]
    111              //source address increment disable
    112              DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x9005             STR      R0,[SP, #+20]
    113              //Location assigned to peripheral register will be source
    114              DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x9003             STR      R0,[SP, #+12]
    115              //chunk of data to be transfered
    116              DMA_InitStructure.DMA_BufferSize = 8;
   \   00000038   0x2008             MOVS     R0,#+8
   \   0000003A   0x9004             STR      R0,[SP, #+16]
    117              //source and destination start addresses
    118              DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)ADC1_DR;
   \   0000003C   0x....             LDR.N    R0,??DataTable4_8  ;; 0x4001244c
   \   0000003E   0x9001             STR      R0,[SP, #+4]
    119              DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)ADC_values;
   \   00000040   0x....             LDR.N    R0,??DataTable4_3
   \   00000042   0x9002             STR      R0,[SP, #+8]
    120              //send values to DMA registers
    121              DMA_Init(DMA1_Channel1, &DMA_InitStructure);
   \   00000044   0xA901             ADD      R1,SP,#+4
   \   00000046   0x....             LDR.N    R0,??DataTable4_7  ;; 0x40020008
   \   00000048   0x.... 0x....      BL       DMA_Init
    122              // Enable DMA1 Channel Transfer Complete interrupt
    123              DMA_ITConfig(DMA1_Channel1, DMA_IT_TC, ENABLE);
   \   0000004C   0x2201             MOVS     R2,#+1
   \   0000004E   0x2102             MOVS     R1,#+2
   \   00000050   0x....             LDR.N    R0,??DataTable4_7  ;; 0x40020008
   \   00000052   0x.... 0x....      BL       DMA_ITConfig
    124              DMA_Cmd(DMA1_Channel1, ENABLE); //Enable the DMA1 - Channel1
   \   00000056   0x2101             MOVS     R1,#+1
   \   00000058   0x....             LDR.N    R0,??DataTable4_7  ;; 0x40020008
   \   0000005A   0x.... 0x....      BL       DMA_Cmd
    125                  
    126              //Enable DMA1 channel IRQ Channel */
    127              NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel1_IRQn;
   \   0000005E   0x200B             MOVS     R0,#+11
   \   00000060   0xF88D 0x0000      STRB     R0,[SP, #+0]
    128              NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0xF88D 0x0001      STRB     R0,[SP, #+1]
    129              NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0xF88D 0x0002      STRB     R0,[SP, #+2]
    130              NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \   00000070   0x2001             MOVS     R0,#+1
   \   00000072   0xF88D 0x0003      STRB     R0,[SP, #+3]
    131              NVIC_Init(&NVIC_InitStructure);
   \   00000076   0x4668             MOV      R0,SP
   \   00000078   0x.... 0x....      BL       NVIC_Init
    132          }
   \   0000007C   0xB00D             ADD      SP,SP,#+52
   \   0000007E   0xBD00             POP      {PC}             ;; return
    133           

   \                                 In section .text, align 2, keep-with-next
    134          void DMA1_Channel1_IRQHandler(void)
    135          {
   \                     DMA1_Channel1_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    136            //Test on DMA1 Channel1 Transfer Complete interrupt
    137            if(DMA_GetITStatus(DMA1_IT_TC1))
   \   00000002   0x2002             MOVS     R0,#+2
   \   00000004   0x.... 0x....      BL       DMA_GetITStatus
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD007             BEQ.N    ??DMA1_Channel1_IRQHandler_0
    138            {
    139              DMA_ClearITPendingBit(DMA1_IT_TC1 | DMA1_IT_GL1);
   \   0000000C   0x2003             MOVS     R0,#+3
   \   0000000E   0x.... 0x....      BL       DMA_ClearITPendingBit
    140                __status++;
   \   00000012   0x....             LDR.N    R0,??DataTable4_1
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0x1C40             ADDS     R0,R0,#+1
   \   00000018   0x....             LDR.N    R1,??DataTable4_1
   \   0000001A   0x6008             STR      R0,[R1, #+0]
    141              }
    142          }
   \                     ??DMA1_Channel1_IRQHandler_0: (+1)
   \   0000001C   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x40012400         DC32     0x40012400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     __status

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     adc_view_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     ADC_values

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x40010800         DC32     0x40010800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x40020008         DC32     0x40020008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x4001244C         DC32     0x4001244c

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x25 0x64          DC8 "%d ADC value on ch%d = %d ,%d\015\012"
   \              0x20 0x41    
   \              0x44 0x43    
   \              0x20 0x76    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x20 0x6F    
   \              0x6E 0x20    
   \              0x63 0x68    
   \              0x25 0x64    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x2C 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x3D 0x3D          DC8 "=========================\012\015"
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x3D 0x3D    
   \              0x3D 0x0A    
   \              0x0D 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   ADCInit
        32   -> ADC_Cmd
        32   -> ADC_DMACmd
        32   -> ADC_GetCalibrationStatus
        32   -> ADC_GetResetCalibrationStatus
        32   -> ADC_Init
        32   -> ADC_RegularChannelConfig
        32   -> ADC_ResetCalibration
        32   -> ADC_StartCalibration
        32   -> GPIO_Init
        32   -> GPIO_StructInit
        32   -> RCC_APB2PeriphClockCmd
       8   DMA1_Channel1_IRQHandler
         8   -> DMA_ClearITPendingBit
         8   -> DMA_GetITStatus
      56   DMAInit
        56   -> DMA_Cmd
        56   -> DMA_DeInit
        56   -> DMA_ITConfig
        56   -> DMA_Init
        56   -> NVIC_Init
        56   -> RCC_AHBPeriphClockCmd
       8   adc_dma_init
         8   -> ADCInit
         8   -> ADC_SoftwareStartConvCmd
         8   -> DMAInit
      24   dma_test_adc8ch
        24   -> ADC_SoftwareStartConvCmd
        24   -> printf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
      32  ?_0
      28  ?_1
     228  ADCInit
      16  ADC_values
      30  DMA1_Channel1_IRQHandler
     128  DMAInit
       4  __status
      20  adc_dma_init
       4  adc_view_flag
     158  dma_test_adc8ch

 
  20 bytes in section .bss
   4 bytes in section .data
  60 bytes in section .rodata
 600 bytes in section .text
 
 600 bytes of CODE  memory
  60 bytes of CONST memory
  24 bytes of DATA  memory

Errors: none
Warnings: 3
